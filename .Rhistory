"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
library(shinydashboard)
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
install.packages("sass")
install.packages("sass")
install.packages("sass")
install.packages("sass")
shiny::runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
install.packages("woolridge")
install.packages("wooldridge")
#install.packages("wooldridge")
library(wooldridge)
help("wage1")
data("wage1")
force(wage1)
model1 = lm(wage~a+u)
model1 = lm(wage~education)
attach("wage1")
str(wage1)
model1 = lm(wage1$wage~wage$education)
model1 = lm(wage1$wage~wage1$education)
model1 = lm(wage1$wage~wage1$educ)
model(model1)
modal(model1)
model1
model1 = lm(wage1$wage~wage1$educ+wage1$exper+wage1$tenure)
model1
summary(model1)
summary(model1)
model1 = lm(wage1$wage~wage1$educ)
model1
summary(model1)
plot(wage1$wage,wage1$educ, main = "Graph",pch = 19, frame = FALSE)
plot(wage1$educ,wage1$wage, main = "Graph",pch = 19, frame = FALSE)
abline(lm(wage1$wage~wage1$educ),col= "blue")
Twenty_YearOld = c(27,26,21,24,15,18,17,12,13)
Sixt_YearOld = c(26,29,29,29,27,16,20,27,14)
t.test(Twenty_YearOld,Sixt_YearOld)
hist(Twenty_YearOld, freq = FALSE)
lines(density(x))
lines(density(Twenty_YearOld))
hist(Twenty_YearOld,Sixt_YearOld , freq = FALSE)
shapiro.test(Twenty_YearOld,Sixt_YearOld)
t.test(Twenty_YearOld,Sixt_YearOld)
shapiro.test(Twenty_YearOld)
shapiro.test(Sixt_YearOld)
hist(Sixt_YearOld, freq = FALSE)
hist(Sixt_YearOld)
, freq = FALSE
hist(Sixt_YearOld, freq = FALSE)
hist(Twenty_YearOld, freq = FALSE)
wilcox.test(Twenty_YearOld, Sixt_YearOld, alternative = "two.sided")
wilcox.test(Twenty_YearOld, Sixt_YearOld)
t.test(Twenty_YearOld)
attach(mtcars)
View(mtcars)
attach(Skateboard)
install.packages("resampledata")
library(resampledata)
attach(Skateboard)
View(Skateboard)
hist(Skateboard$Testosterone)
boxplot(Skateboard$Testosterone)
y
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
runApp('Nakul/Probability/Project/Trial/trial_6')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
install.packages("faraway")
library(faraway)
help(faraway)
??faraway
data("savings")
View(savings)
View(savings)
df <- data("savings")
length(df)
df <- attach("savings")
attach("savings")
attach(savings)
View(savings)
length(savings)
nrow(savings)
length(savings)
typeof(savings$sr)
typeof(savings$pop15)
typeof(savings$pop75)
typeof(savings$dpi)
typeof(savings$ddpi)
pairs(savings)
model1 = lm(savings$sr~savings$pop15+savings$pop75+savings$dpi+savings$ddpi)
summary(model1)
nrow(savings) #Hello
plot(model1)
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
View(tree)
library(tree)
View(tree)
dtraintree = rpart(tree)
library(rpart)
dtraintree = rpart(tree)
View(tree)
dtraintree = rpart(Y~x)
printcp(tree)
View(trees)
dtraintree = rpart(trees$Girth~trees$Height+trees$Volume)
summary(dtraintree)
TestFunction <- function(df){
M = rep(0,ncol(df))
for (i in 1:ncol(df)) {
M[i] = max(df[,i],na.rm = TRUE)
}
return(M)
}
s = c(23,45,21,67,78,34,77)
TestFunction(s)
s = c(c(23,45),c(21,67),c(78,34),c(77,76))
TestFunction(s)
ncol(s)
s = matrix(c(23,45,21,67,78,34,77,67),nrow = 3, ncol = 3)
s = matrix(c(23,45,21,67,78,34,77,67),nrow = 3, ncol = 2)
s = matrix(c(23,45,21,67,78,34,77,67),nrow = 4, ncol = 2)
TestFunction(s)
print(M)
TestFunction <- function(df){
M = rep(0,ncol(df))
print(M)
for (i in 1:ncol(df)) {
M[i] = max(df[,i],na.rm = TRUE)
}
return(M)
}
s = matrix(c(23,45,21,67,78,34,77,67),nrow = 4, ncol = 2)
TestFunction(s)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
M = map_dbl(df,max(df[,i],na.rm = TRUE))
return(M)
}
TestFunction1(s)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
M = map_dbl(df,max(df,na.rm = TRUE))
return(M)
}
TestFunction1(s)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
M = map_dbl(df,sapply(df,max))
return(M)
}
TestFunction1(s)
TestFunction1(s)
rlang::last_error()
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
map_dbl(trims, ~ mean(x, trim = .x))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(df,sapply(df,max))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,sapply(s,max))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,mean(s))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(trims,mean(s))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(trims,mean(trims))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(trims,~mean(trims))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~mean(s))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~sapply(s,max))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~max(s))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~max(s,na.rm = TRUE))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~max(s[,ncol(s)],na.rm = TRUE))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~max(s,na.rm = TRUE)[,ncol(s)])
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~max(s,na.rm = TRUE))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s,~sapply(s,max))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s, max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[,ncol(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[ncol(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)])
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)], .f = default)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)], .f = none)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)], mean)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[max(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[,nrows(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[,nrow(s)], max)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s[,ncol(s)], max)
TestFunction(s)
attach(mtcars)
TestFunction(mtcars)
s
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s, max(s[,ncol(S)]))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(s, max(s[,ncol(s)]))
map_dbl(mtcars)
map_dbl(mtcars,max)
m = map_dbl(mtcars,max)
m
m = map_dbl(mtcars,max(na.rm = TRUE))
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
M = map_dbl(df,max)
return(M)
}
TestFunction1(s)
s
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
print(M)
M = map_dbl(df,max)
return(M)
}
TestFunction1(s)
TestFunction(mtcars)
TestFunction1(mtcars)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
print(M)
M = map_dbl(df,max)
colnames(M) = NULL
return(M)
}
TestFunction1(mtcars)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
print(M)
M = map_dbl(df,max)
colnames(M) <- NULL
return(M)
}
TestFunction1(mtcars)
names(M) <- NULL
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
print(M)
M = map_dbl(df,max)
names(M) <- NULL
return(M)
}
TestFunction1(mtcars)
TestFunction1(s)
TestFunction(s)
m = map_dbl(mtcars,max(mtcars,na.rm = TRUE))
m = map_dbl(mtcars,max(mtcars))
m
m = map_dbl(mtcars,max)
m
map_dbl(mtcars,max)
map_dbl(s,max)
map_dbl(s,max)
map_dbl(s,apply(s,max))
map_dbl(s,apply(s,2,max))
map_dbl(s,~apply(s,2,max))
TestFunction <- function(df){
M = rep(0,ncol(df))
print(M)
for (i in 1:ncol(df)) {
M[i] = max(df[,i])
}
return(M)
}
TestFunction(s)
TestFunction(mtcars)
TestFunction <- function(df){
M = rep(0,ncol(df))
print(M)
for (i in 1:ncol(df)) {
M[i] = max(df[,i],na.rm = TRUE)
}
return(M)
}
s = matrix(c(23,45,21,67,78,34,77,67),nrow = 4, ncol = 2)
s
TestFunction(s)
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(1:ncol(s), max(s[,i],na.rm = TRUE))
#> [1] -0.3500  0.0434  0.0354  0.0502
map_dbl(1:ncol(s), max(s[,.x],na.rm = TRUE))
t = 1:ncol(s)
map_dbl(t, max(s[,t],na.rm = TRUE))
map_dbl(t,~max(s[,t],na.rm = TRUE))
map_dbl(t,~max(s[,t],na.rm = TRUE))
max(s[,t])
map_dbl(t,max(s[,t],na.rm = TRUE))
max(s[,t])
max(s[,1])
t
map(t,print(t))
map_dbl(t,print(t))
map_dbl(t,~print(t))
p = map_dbl(t,~print(t))
p
p = map_dbl(t,~mean())
p = map_dbl(t,~mean)
p = map_dbl(t,mean)
p
map_dbl(t,max(s[,t],na.rm = TRUE))
map_dbl(t,~max(s[,t],na.rm = TRUE))
map_dbl(s,~apply(s,2,max))
map_dbl(t,~apply(s,2,max))
map_dbl(t,~max(s))
t %>%
map_dbl(max)
t %>%
map_dbl(max(s))
t %>%
map_dbl(max)
t %>%
map_dbl(~max)
t %>%
map_dbl(~max(s))
t %>%
map_dbl(~max(s[,t]))
s %>%
map_dbl(max)
s %>%
map_dbl(max[,t])
s %>%
map_dbl(~max[,t])
t %>%
map_dbl(max)
t %>%
map_dbl(mean)
t %>%
s%>%
map_dbl(mean)
t %>%
map(s)%>%
map_dbl(mean)
t %>%
map(as.integer(s))%>%
map_dbl(mean)
t %>%
map(as.numeric(s))%>%
map_dbl(mean)
t %>%
map_dbl(mean)
t %>%
map_dbl(max)
s %>%
map_dbl(max)
mtcars %>%
map_dbl(max)
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(rnorm, n = 10) %>%
1:10 %>%
map(rnorm, n = 10)
1:10 %>%
map(rnorm, n = 10)
1:2 %>%
map(rnorm, n = 10)
1:2 %>%
map(s)
1:ncol(s) %>%
map(s)
1:ncol(s) %>%
map(mtcars)
1:ncol(s) %>%
map(s,max)
1:ncol(s) %>%
map(max)
1:ncol(s) %>%
map(max(s))
1:ncol(s) %>%
map(max)
1:ncol(s) %>%
map(mean)
s %>%
map(mean)
s %>%
map_dbl(mean)
s %>%
map_dbl(max)
trims <- c(0, 0.1, 0.2, 0.5)
trims %>%
map_dbl(max)
map_dbl(trims, ~ max(x, trim = .x))
trims %>%
map_dbl(~max)
trims %>%
map_dbl(~max)
trims %>%
as.double(map_dbl(~max))
trims %>%
as.double(map_dbl(max))
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
map_dbl(trims, ~ max(x, trim = .x))
map_dbl(trims, ~ mean(x, trim = .x))
help("map_dbl")
mtcars %>%
map_dbl(.x)
mtcars %>%
map_dbl(print)
s %>%
map_dbl(print)
s %>%
map_dbl(max)
s %>%
map_dbl(~max(s))
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
print(M)
M = map_dbl(df,max)
names(M) <- NULL
return(M)
}
TestFunction1(s)
TestFunction1(mtcars)
TestFunction1 <- function(df){
library(purrr)
M = rep(0,ncol(df))
M = map_dbl(df,max)
names(M) <- NULL
return(M)
}
TestFunction1(mtcars)
TestFunction(mtcars)
TestFunction <- function(df){
M = rep(0,ncol(df))
for (i in 1:ncol(df)) {
M[i] = max(df[,i],na.rm = TRUE)
}
return(M)
}
TestFunction(mtcars)
TestFunction1(mtcars)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='nakulrameshvarma', token='9B04C1C1AEA59313C41781B55F60BB9E', secret='lfglp5dtfPf8pBMBc8rKHM+JVtYDXGBdtWiCkgkK')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
