# filters
data <- data[data$year == input$mapYearInput, ]
if (input$mapRegionInput != 'All') {
data <- data[data$continent == input$mapRegionInput, ]
}
data
})
map.medals.data <- reactive({
data <- map.data()
if (nrow(data) > 0) {
if (grepl('Gold', input$mapViewInput)) {
data$popup <- paste0(data$gold, ' medals')
data <- data[data$gold > 0, ]
} else if (grepl('Silver', input$mapViewInput)) {
data$popup <- paste0(data$silver, ' medals')
data <- data[data$silver > 0, ]
} else {
data$popup <- paste0(data$bronze, ' medals')
data <- data[data$bronze > 0, ]
}
}
data
})
output$mapLeaflet <- renderLeaflet({
leaflet.map <- leaflet(data=map.data()) %>%
addTiles()
if (nrow(map.data()) > 0) {
if (input$mapViewInput=='Participant Countries') {
customIcons <- awesomeIcons(
icon='flag',
iconColor='black',
library='glyphicon'
#markerColor=getRegionColor(map.data())
)
leaflet.map <- leaflet.map %>%
addAwesomeMarkers(~long, ~lat, label=~country, icon=customIcons)
leaflet.map <- leaflet.map
} else {
m.data <- map.medals.data()
if (nrow(m.data) > 0) {
leaflet.map <- leaflet(data=m.data) %>%
addTiles()
if (grepl('Gold', input$mapViewInput)) {
icon.url <- 'gold-medal-64.png'
} else if (grepl('Silver', input$mapViewInput)) {
icon.url <- 'silver-medal-64.png'
} else {
icon.url <- 'bronze-medal-64.png'
}
# set icon size based on value
getIconSize <- function(m.data) {
sapply(m.data$total, function(total) {
if(total <= 10) {
16
} else if(total <= 50) {
24
} else if (total <= 100) {
32
} else {
48
}
})
}
medalIcons <- icons(iconUrl=icon.url, iconWidth=getIconSize(m.data), iconHeight=getIconSize(m.data))
leaflet.map <- leaflet.map %>%
addMarkers(~long, ~lat, label=~country,
icon=medalIcons,
popup=~popup)
}
}
}
leaflet.map
})
output$mapViewTitle <- renderUI({
if (input$mapYearInput == 'All') {
leafletSubtitle <- "(All years)"
} else {
hostData <- growth.df[growth.df$year==input$mapYearInput, ]
leafletSubtitle <- paste0(input$mapYearInput, " Games in ", hostData[1, "city"], ", ", hostData[1, "country"])
}
div(
h1(id="leaflet-map-title", input$mapViewInput),
h2(id="leaflet-map-subtitle", leafletSubtitle)
)
})
output$mapViewCaption <- renderUI({
if (nrow(map.data()) == 0) {
p("No data available for the selected filters")
} else {
if (grepl('Medals', input$mapViewInput)) {
p(class="plot-note", "Click on a medal to find out how many were won")
}
}
})
###################################
# Country Details data
###################################
updateSelectInput(session, "countryRegionInput", choices=uniqueRegions)
region.countries <- reactive({
if (input$countryRegionInput == 'All') {
as.list(sort(unique(results.df$country)))
} else {
as.list(sort(unique(results.df[results.df$continent==input$countryRegionInput, ]$country)))
#cat(file=stderr(), paste0(input$countryRegionInput, ' countries: ', nrow(results.df[results.df$continent==input$countryRegionInput]), '\n'))
}
})
observe({
defaultCountry = NULL
if (input$countryRegionInput == 'All') {
defaultCountry='Australia' # default
}
updateSelectInput(session, "countryNameInput", choices=region.countries(), selected=defaultCountry)
})
country.data <- reactive({
results.df[results.df$country==input$countryNameInput, ]
})
country.misc.data <- reactive({
country.df <- country.data()
country.code <- country.df[1, ]$country.code
continent <- country.df[1, ]$continent
years.joined <- nrow(country.df) - 1 # deduct 'All' entry
first.join.year <- min(country.df$year)
total.gold <- country.df[country.df$year=='All', ]$gold
total.silver <- country.df[country.df$year=='All', ]$silver
total.bronze <- country.df[country.df$year=='All', ]$bronze
total.medals <- country.df[country.df$year=='All', ]$total
list(country.code=country.code,
continent=continent,
years.joined=years.joined,
first.join.year=first.join.year,
total.gold=total.gold,
total.silver=total.silver,
total.bronze=total.bronze,
total.medals=total.medals)
})
output$countryProfile <- renderUI({
div(id="country-profile-details",
img(id="country-profile-flag",
src=paste0(flagBaseUrl, country.misc.data()[['country.code']], '.png'),
alt=paste0(input$countryNameInput, ' flag'),
width=120),
h1(id="country-profile-name", input$countryNameInput),
tags$table(id="country-profile-table", border="1",
tags$tr(tags$td(class="country-profile-label", "Region"), tags$td(class="country-profile-value", country.misc.data()[['continent']])),
tags$tr(tags$td(class="country-profile-label", "# Years joined"), tags$td(class="country-profile-value", country.misc.data()[['years.joined']])),
tags$tr(tags$td(class="country-profile-label", "Year first joined"), tags$td(class="country-profile-value", country.misc.data()[['first.join.year']])),
tags$tr(tags$td(class="country-profile-label", "Gold medals"), tags$td(class="country-profile-value", country.misc.data()[['total.gold']])),
tags$tr(tags$td(class="country-profile-label", "Silver medals"), tags$td(class="country-profile-value", country.misc.data()[['total.silver']])),
tags$tr(tags$td(class="country-profile-label", "Bronze medals"), tags$td(class="country-profile-value", country.misc.data()[['total.bronze']])),
tags$tr(tags$td(class="country-profile-label", "Total medals"), tags$td(class="country-profile-value", country.misc.data()[['total.medals']]))
)
)
})
output$countryYearResults <- renderPlot({
year.df <- country.data()
year.df <- year.df[year.df$year!='All', ]
year.df <- year.df[, c(1, 7, 8, 9)]
#cat(file=stderr(), str(year.df))
year.df <- melt(year.df, id='year')
names(year.df) <- c('year', 'medal.class', 'medal.count')
#cat(file=stderr(), str(year.df))
ggplot(year.df, aes(x=year, y=medal.count, fill=medal.class)) +
geom_bar(stat='identity', color='black') +
labs(x='Year', y='Medals won',
title=paste0('Medals won by ', input$countryNameInput, ' by Year')) +
theme(plot.title=element_text(size=22, hjust=0.5, face="bold")) +
scale_fill_manual("legend", values=c('gold'='#C98910', 'silver'='#A8A8A8', 'bronze'='#965A38')) +
scale_y_continuous(labels=function(x) { floor(x) })
})
country.sports.data <- reactive({
data <- sports.df[sports.df$country==input$countryNameInput, ]
# get total
data$total <- data$gold + data$silver + data$bronze
# select only needed columns
data <- data[, c('sport', 'country', 'total')]
# aggregate: sum
data.agg <- aggregate(data[3], data[-3], sum)
if (nrow(data.agg) > 0) {
# sort descending
data.agg <- data.agg[with(data.agg, order(-total)), ]
}
# return aggregate
data.agg
})
output$countrySportsResultsTitle <- renderUI({
row.count <- nrow(country.sports.data())
if (row.count > 0) {
h3(id="country-sports-bubbles-title", paste0("Medals won by ", input$countryNameInput, " by Sport"))
}
})
output$countrySportsResults <- renderBubbles({
data <- country.sports.data()
row.count <- nrow(data)
if (row.count > 0) {
colors <- heat.colors(row.count, alpha=NULL)
bubbles(data$total, label=data$sport,
tooltip=paste0(data$total, ' medals'),
color=colors)
} else {
bubbles(0, label="") # empty
}
})
###################################
# Sports and Events
###################################
updateSelectInput(session, "sportInput", choices=uniqueSports)
observe({
if (input$sportInput != '') {
events <- sports.df[sports.df$sport==input$sportInput, c('event')]
updateSelectInput(session, "eventInput", choices=events)
}
})
sport.data <- reactive({
data <- sports.df[sports.df$sport == input$sportInput, c('country', 'total')]
if (nrow(data) > 0) {
data.agg <- aggregate(data[2], data[-2], sum)
} else {
data.agg <- NULL
}
data.agg
})
event.data <- reactive({
data <- sports.df[(sports.df$sport == input$sportInput & sports.df$event == input$eventInput), c('country', 'total')]
if (nrow(data) > 0) {
data.agg <- aggregate(data[2], data[-2], sum)
} else {
data.agg <- NULL
}
data.agg
})
output$SportsPlot <- renderPlot({
data <- sport.data()
if (!is.null(data)) {
ggplot(data, aes(x=reorder(country, total), y=total)) +
geom_bar(stat='identity', color='white', fill='dodgerblue4') +
labs(x='Country', y='Medals won', title=paste0('Medals won in ', input$sportInput)) +
theme(plot.title=element_text(size=20, hjust=0.5, face="bold")) +
scale_y_continuous(labels=function(x) { floor(x) }) +
coord_flip()
}
})
output$EventsPlot <- renderPlot({
data <- event.data()
if (!is.null(data)) {
ggplot(data, aes(x=reorder(country, total), y=total)) +
geom_bar(stat='identity', color='white', fill='deepskyblue3') +
labs(x='Country', y='Medals won', title=paste0('Medals won in ', input$sportInput, ': ', input$eventInput)) +
theme(plot.title=element_text(size=20, hjust=0.5, face="bold")) +
scale_y_continuous(labels=function(x) { floor(x) }) +
coord_flip()
}
})
})
runApp('Nakul/Probability/Project/Trial/trial_3/trialR.R')
runApp('Nakul/Probability/Project/Trial/trial_3/trialR.R')
runApp('Nakul/Probability/Project/Trial/trial_3/trialR.R')
X <- c(0,1,2,3)
Prob <- c(0.208,0.167,0.25,0.375)
N <- c('A','C','G','U')
barplot(Prob,names=N,ylab="Probability", main="RNA Residue Analysis")
plot(X,cumilativeprob,xlim=range(0,1,2,3,4), main="RNA Residue Analysis CDF", xlab="X=", type="S")
cumilativeprob <- c(0.208,0.625,0.375,1)
plot(X,cumilativeprob,xlim=range(0,1,2,3,4), main="RNA Residue Analysis CDF", xlab="X=", type="S")
cumilativeprob <- c(0.208,0.375,0.625,1)
plot(X,cumilativeprob,xlim=range(0,1,2,3,4), main="RNA Residue Analysis CDF", xlab="X=", type="S")
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
library(zoo)
ts <- zoo(X, dt)
ts <- zoo(x, dt)
library(xts)
ts <- xts(x, dt)
prices <- c(132.45, 130.85, 130.00, 129.55, 130.85)
dates <- as.Date(c("2010-01-04", "2010-01-05", "2010-01-06", "2010-01-07","2010-01-08"))
ibm.daily <- zoo(prices, dates)
print(ibm.daily)
prices <- c(131.18, 131.20, 131.17, 131.15, 131.17)
seconds <- c(9.5, 9.500278, 9.500556, 9.500833, 9.501111)
ibm.sec <- zoo(prices, seconds)
print(ibm.sec)
coredata(ibm.daily)
index(ibm.daily)
vignette("zoo")
xlab="Date"
ylab="Relative Price"
main="IBM: Historical vs. Inflation-Adjusted"
lty=c("dotted", "solid")
ylim=range(coredata(ibm.daily))
# Plot the two time series in two plots
plot(ibm.daily, screens=c(1,2), lty=lty, main=main, xlab=xlab, ylab=ylab, ylim=ylim)
# Plot the two time series in two plots
plot(ibm.daily, screens=c(1,2), ylim=ylim)
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
runApp('Nakul/Probability/Project/Trial/trial_3/trialR.R')
runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
shiny::runApp('Nakul/Probability/Project/Trial/trial_4')
runApp('Nakul/R programing/Scrollable page.R')
install.packages("remotes")
install.packages("remotes")
remotes::install_github("lgnbhl/scroller")
library(shiny); runApp('Nakul/R programing/Scrollable page.R')
shinyApp(
ui = fluidPage(
align = "center",
scroller::use_scroller(), # add use_scroller() in the UI
h1("Shiny with scroller"),
a("Direct to plot", type = "button", class = "btn btn-info", href = "#plot"), #plot
a("Scroll to plot", type = "button", class = "btn btn-danger", href = "##plot"), ##plot
HTML(rep("<br/><br/><br/>&darr;<br/>", 10)),
plotOutput("plot"),
a("Scroll to top", type = "button", class = "btn btn-danger", href = "#.btn") #.btn
),
server = function(input, output, session){
output$plot <- renderPlot({
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
})
}
)
shinyApp(
ui = fluidPage(
align = "center",
scroller::use_scroller(), # add use_scroller() in the UI
h1("Shiny with scroller"),
a("Direct to plot", type = "button", class = "btn btn-info", href = "#plot"), #plot
a("Scroll to plot", type = "button", class = "btn btn-danger", href = "##plot"), ##plot
HTML(rep("<br/><br/><br/>&darr;<br/>", 10)),
plotOutput("plot"),
a("Scroll to top", type = "button", class = "btn btn-danger", href = "#.btn") #.btn
),
server = function(input, output, session){
output$plot <- renderPlot({
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
})
}
)
library(shiny); runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
runApp('Nakul/R programing/RShinyTutorial.R')
bs_theme_preview(
bs_theme(version = 4,bootswatch = "cerulean")
)
install.packages("thematic")
bs_theme_preview(
bs_theme(version = 4,bootswatch = "cerulean")
)
install.packages?
install.packages
runApp('Nakul/Probability/Project/Trial/trial_5')
ui <- fluidPage(
# Application title
titlePanel("Hello Shiny!"),
sidebarLayout(
# Sidebar with a slider input
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 0,
max = 1000,
value = 500)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
library(shinydashboard)
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
install.packages("sass")
install.packages("sass")
install.packages("sass")
install.packages("sass")
shiny::runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
runApp('Nakul/Probability/Project/Trial/trial_5')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
install.packages("woolridge")
install.packages("wooldridge")
#install.packages("wooldridge")
library(wooldridge)
help("wage1")
data("wage1")
force(wage1)
model1 = lm(wage~a+u)
model1 = lm(wage~education)
attach("wage1")
str(wage1)
model1 = lm(wage1$wage~wage$education)
model1 = lm(wage1$wage~wage1$education)
model1 = lm(wage1$wage~wage1$educ)
model(model1)
modal(model1)
model1
model1 = lm(wage1$wage~wage1$educ+wage1$exper+wage1$tenure)
model1
summary(model1)
summary(model1)
model1 = lm(wage1$wage~wage1$educ)
model1
summary(model1)
plot(wage1$wage,wage1$educ, main = "Graph",pch = 19, frame = FALSE)
plot(wage1$educ,wage1$wage, main = "Graph",pch = 19, frame = FALSE)
abline(lm(wage1$wage~wage1$educ),col= "blue")
Twenty_YearOld = c(27,26,21,24,15,18,17,12,13)
Sixt_YearOld = c(26,29,29,29,27,16,20,27,14)
t.test(Twenty_YearOld,Sixt_YearOld)
hist(Twenty_YearOld, freq = FALSE)
lines(density(x))
lines(density(Twenty_YearOld))
hist(Twenty_YearOld,Sixt_YearOld , freq = FALSE)
shapiro.test(Twenty_YearOld,Sixt_YearOld)
t.test(Twenty_YearOld,Sixt_YearOld)
shapiro.test(Twenty_YearOld)
shapiro.test(Sixt_YearOld)
hist(Sixt_YearOld, freq = FALSE)
hist(Sixt_YearOld)
, freq = FALSE
hist(Sixt_YearOld, freq = FALSE)
hist(Twenty_YearOld, freq = FALSE)
wilcox.test(Twenty_YearOld, Sixt_YearOld, alternative = "two.sided")
wilcox.test(Twenty_YearOld, Sixt_YearOld)
t.test(Twenty_YearOld)
attach(mtcars)
View(mtcars)
attach(Skateboard)
install.packages("resampledata")
library(resampledata)
attach(Skateboard)
View(Skateboard)
hist(Skateboard$Testosterone)
boxplot(Skateboard$Testosterone)
y
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
runApp('Nakul/Probability/Project/Trial/trial_6')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
install.packages("faraway")
library(faraway)
help(faraway)
??faraway
data("savings")
View(savings)
View(savings)
df <- data("savings")
length(df)
df <- attach("savings")
attach("savings")
attach(savings)
View(savings)
length(savings)
nrow(savings)
length(savings)
typeof(savings$sr)
typeof(savings$pop15)
typeof(savings$pop75)
typeof(savings$dpi)
typeof(savings$ddpi)
pairs(savings)
model1 = lm(savings$sr~savings$pop15+savings$pop75+savings$dpi+savings$ddpi)
summary(model1)
nrow(savings) #Hello
plot(model1)
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
shiny::runApp('Nakul/Probability/Project/Trial/trial_6')
